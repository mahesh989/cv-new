import 'package:flutter/material.dart';
import 'notification_service.dart';
import '../theme/app_theme.dart';

/// Test widget to demonstrate notification system working above all UI elements
class NotificationTestWidget extends StatelessWidget {
  const NotificationTestWidget({super.key});

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('Notification System Test'),
        backgroundColor: AppTheme.primaryCosmic,
        foregroundColor: Colors.white,
      ),
      body: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.stretch,
          children: [
            const Text(
              'Test Notifications Above All UI Elements',
              style: TextStyle(
                fontSize: 20,
                fontWeight: FontWeight.bold,
              ),
              textAlign: TextAlign.center,
            ),
            const SizedBox(height: 24),

            // Basic Notifications
            const Text('Basic Notifications:',
                style: TextStyle(fontWeight: FontWeight.bold)),
            const SizedBox(height: 8),
            Row(
              children: [
                Expanded(
                  child: ElevatedButton(
                    onPressed: () => NotificationService.showSuccess(
                      "Success notification!",
                      context: context,
                    ),
                    style:
                        ElevatedButton.styleFrom(backgroundColor: Colors.green),
                    child: const Text('Success'),
                  ),
                ),
                const SizedBox(width: 8),
                Expanded(
                  child: ElevatedButton(
                    onPressed: () => NotificationService.showError(
                      "Error notification!",
                      context: context,
                    ),
                    style:
                        ElevatedButton.styleFrom(backgroundColor: Colors.red),
                    child: const Text('Error'),
                  ),
                ),
              ],
            ),
            const SizedBox(height: 8),
            Row(
              children: [
                Expanded(
                  child: ElevatedButton(
                    onPressed: () => NotificationService.showWarning(
                      "Warning notification!",
                      context: context,
                    ),
                    style: ElevatedButton.styleFrom(
                        backgroundColor: Colors.orange),
                    child: const Text('Warning'),
                  ),
                ),
                const SizedBox(width: 8),
                Expanded(
                  child: ElevatedButton(
                    onPressed: () => NotificationService.showInfo(
                      "Info notification!",
                      context: context,
                    ),
                    style:
                        ElevatedButton.styleFrom(backgroundColor: Colors.blue),
                    child: const Text('Info'),
                  ),
                ),
              ],
            ),

            const SizedBox(height: 24),

            // Toast Notifications
            const Text('Toast Notifications:',
                style: TextStyle(fontWeight: FontWeight.bold)),
            const SizedBox(height: 8),
            ElevatedButton(
              onPressed: () => NotificationService.showToast(
                "Toast notification appears above everything!",
                backgroundColor: AppTheme.primaryTeal,
              ),
              child: const Text('Show Toast'),
            ),

            const SizedBox(height: 24),

            // Overlay Notifications
            const Text('Overlay Notifications (Highest Priority):',
                style: TextStyle(fontWeight: FontWeight.bold)),
            const SizedBox(height: 8),
            ElevatedButton(
              onPressed: () => NotificationService.showOverlayNotification(
                message: "Critical overlay notification!",
                icon: Icons.priority_high,
                backgroundColor: Colors.deepOrange,
                duration: const Duration(seconds: 4),
                onTap: () => NotificationService.showToast("Overlay tapped!"),
              ),
              style:
                  ElevatedButton.styleFrom(backgroundColor: Colors.deepOrange),
              child: const Text('Show Overlay Notification'),
            ),

            const SizedBox(height: 24),

            // Loading Overlay
            const Text('Loading Overlay:',
                style: TextStyle(fontWeight: FontWeight.bold)),
            const SizedBox(height: 8),
            Row(
              children: [
                Expanded(
                  child: ElevatedButton(
                    onPressed: () {
                      NotificationService.showLoadingOverlay(
                        message: "Loading... This appears above everything!",
                        dismissible: true,
                      );
                      // Auto-hide after 3 seconds
                      Future.delayed(const Duration(seconds: 3), () {
                        NotificationService.hideLoadingOverlay();
                      });
                    },
                    child: const Text('Show Loading'),
                  ),
                ),
                const SizedBox(width: 8),
                Expanded(
                  child: ElevatedButton(
                    onPressed: () => NotificationService.hideLoadingOverlay(),
                    style:
                        ElevatedButton.styleFrom(backgroundColor: Colors.grey),
                    child: const Text('Hide Loading'),
                  ),
                ),
              ],
            ),

            const SizedBox(height: 24),

            // Test with Dialog
            const Text('Test Above Dialogs:',
                style: TextStyle(fontWeight: FontWeight.bold)),
            const SizedBox(height: 8),
            ElevatedButton(
              onPressed: () => _showTestDialog(context),
              style: ElevatedButton.styleFrom(
                  backgroundColor: AppTheme.primaryCosmic),
              child: const Text('Show Dialog + Test Notifications'),
            ),

            const SizedBox(height: 24),

            // Clear All
            ElevatedButton(
              onPressed: () => NotificationService.clearAll(),
              style:
                  ElevatedButton.styleFrom(backgroundColor: Colors.grey[600]),
              child: const Text('Clear All Notifications'),
            ),
          ],
        ),
      ),
    );
  }

  void _showTestDialog(BuildContext context) {
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: const Text('Test Dialog'),
        content: const Text(
          'This is a regular dialog. Try the buttons below to see notifications appear above this dialog!',
        ),
        actions: [
          TextButton(
            onPressed: () => NotificationService.showSuccess(
              "Success notification above dialog!",
              context: context,
            ),
            child: const Text('Success'),
          ),
          TextButton(
            onPressed: () => NotificationService.showError(
              "Error notification above dialog!",
              context: context,
            ),
            child: const Text('Error'),
          ),
          TextButton(
            onPressed: () => NotificationService.showOverlayNotification(
              message: "Overlay notification above dialog!",
              icon: Icons.star,
              backgroundColor: Colors.purple,
            ),
            child: const Text('Overlay'),
          ),
          TextButton(
            onPressed: () => NotificationService.showToast(
              "Toast above dialog!",
              backgroundColor: Colors.indigo,
            ),
            child: const Text('Toast'),
          ),
          TextButton(
            onPressed: () => Navigator.pop(context),
            child: const Text('Close'),
          ),
        ],
      ),
    );
  }
}
